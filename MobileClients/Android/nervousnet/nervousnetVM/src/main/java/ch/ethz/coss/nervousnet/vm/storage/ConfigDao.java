package ch.ethz.coss.nervousnet.vm.storage;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ch.ethz.coss.nervousnet.vm.storage.Config;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONFIG.
*/
public class ConfigDao extends AbstractDao<Config, Void> {

    public static final String TABLENAME = "CONFIG";

    /**
     * Properties of entity Config.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property State = new Property(0, Byte.class, "State", false, "STATE");
        public final static Property UUID = new Property(1, String.class, "UUID", false, "UUID");
        public final static Property DeviceBrand = new Property(2, String.class, "DeviceBrand", false, "DEVICE_BRAND");
        public final static Property DeviceModel = new Property(3, String.class, "DeviceModel", false, "DEVICE_MODEL");
        public final static Property DeviceOS = new Property(4, String.class, "DeviceOS", false, "DEVICE_OS");
        public final static Property DeviceOSversion = new Property(5, String.class, "DeviceOSversion", false, "DEVICE_OSVERSION");
        public final static Property LastSyncTime = new Property(6, Long.class, "LastSyncTime", false, "LAST_SYNC_TIME");
    };


    public ConfigDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONFIG' (" + //
                "'STATE' INTEGER," + // 0: State
                "'UUID' TEXT," + // 1: UUID
                "'DEVICE_BRAND' TEXT," + // 2: DeviceBrand
                "'DEVICE_MODEL' TEXT," + // 3: DeviceModel
                "'DEVICE_OS' TEXT," + // 4: DeviceOS
                "'DEVICE_OSVERSION' TEXT," + // 5: DeviceOSversion
                "'LAST_SYNC_TIME' INTEGER);"); // 6: LastSyncTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONFIG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Config entity) {
        stmt.clearBindings();
 
        Byte State = entity.getState();
        if (State != null) {
            stmt.bindLong(1, State);
        }
 
        String UUID = entity.getUUID();
        if (UUID != null) {
            stmt.bindString(2, UUID);
        }
 
        String DeviceBrand = entity.getDeviceBrand();
        if (DeviceBrand != null) {
            stmt.bindString(3, DeviceBrand);
        }
 
        String DeviceModel = entity.getDeviceModel();
        if (DeviceModel != null) {
            stmt.bindString(4, DeviceModel);
        }
 
        String DeviceOS = entity.getDeviceOS();
        if (DeviceOS != null) {
            stmt.bindString(5, DeviceOS);
        }
 
        String DeviceOSversion = entity.getDeviceOSversion();
        if (DeviceOSversion != null) {
            stmt.bindString(6, DeviceOSversion);
        }
 
        Long LastSyncTime = entity.getLastSyncTime();
        if (LastSyncTime != null) {
            stmt.bindLong(7, LastSyncTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Config readEntity(Cursor cursor, int offset) {
        Config entity = new Config( //
            cursor.isNull(offset + 0) ? null : (byte) cursor.getShort(offset + 0), // State
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UUID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DeviceBrand
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DeviceModel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DeviceOS
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DeviceOSversion
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // LastSyncTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Config entity, int offset) {
        entity.setState(cursor.isNull(offset + 0) ? null : (byte) cursor.getShort(offset + 0));
        entity.setUUID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceBrand(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceModel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceOS(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceOSversion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLastSyncTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Config entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Config entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
